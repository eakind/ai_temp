(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("ai", [], factory);
	else if(typeof exports === 'object')
		exports["ai"] = factory();
	else
		root["ai"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/getConfig.js":
/*!**************************!*\
  !*** ./src/getConfig.js ***!
  \**************************/
/*! exports provided: load */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"load\", function() { return load; });\nconst load = function(user_config) {\n  let config = {\n    bindto: '#chart',\n    font_size: 12,\n    size_width: 400,\n    size_height: 400,\n    rotate: false,\n    type: 'category', //bin, numeric\n    divide_show: false,\n    divide_color: 'grey',\n    divide_width: 1,\n    x_name: '',\n    x_grid_show: false,\n    x_grid_color: 'grey',\n    x_grid_width: 1,\n    x_axis_line_show: true,\n    x_axis_line_color: 'black',\n    x_axis_line_width: 1,\n    x_axis_ticks_show: true,\n    x_axis_ticks_color: 'grey',\n    x_axis_title_show: true,\n    x_axis_title_color: 'black',\n    y_grid_show: true,\n    y_grid_color: 'grey',\n    y_grid_width: 1,\n    y_axis_scale: 1,\n    y_axis_percent: false,\n    y_axis_line_show: true,\n    y_axis_line_color: 'black',\n    y_axis_line_width: 1,\n    y_axis_ticks_show: true,\n    y_axis_ticks_color: 'grey',\n    y_axis_title_show: true,\n    y_axis_title_color: 'black',\n    x_axis_hide: 0,\n    x_axis_format: true,\n    y2_axis_line_show: true,\n    y2_axis_line_color: 'black',\n    y2_axis_line_width: 1,\n    y2_axis_ticks_show: true,\n    y2_axis_ticks_color: 'grey',\n    y2_axis_title_show: true,\n    y2_axis_title_color: 'black',\n    y2_scope: null,\n    tooltip_background: 'white',\n    tooltip_color: 'black',\n    tooltip_content_title: '',\n    tooltip_content_value: '',\n    padding_left: 50,\n    padding_right: 10,\n    padding_top: 10,\n    padding_bottom: 50,\n    data: [],\n    data2: [],\n    /** \n    combined: [\n      {\n        type: 'bar', //line,\n        name: '',\n        axis: 'y',\n        style: {\n          fill: 'blue',\n          radius: 5,\n          band: 30,\n          padding: 5\n        }\n      },\n      {\n        type: \"line\",\n        name: '',\n        axis: 'y2',\n        style: {\n          stroke: {\n            color: 'blue',\n            width: 2\n          },\n          point: {\n            type: 'cross',\n            size: 5,\n            color: 'red'\n          },\n          interpolate: false\n        }\n      },\n    ] \n    **/\n    combined: []\n  }\n  let target;\n  let keys;\n  let read;\n\n  const find = () => {\n    const key = keys.shift();\n\n    if (key && target && typeof target === \"object\" && key in target) {\n      target = target[key];\n      return find();\n    } else if (!key) {\n      return target;\n    }\n\n    return undefined;\n  };\n\n  Object.keys(config).forEach(key => {\n    target = user_config;\n    keys = key.split(\"_\");\n    read = find();\n\n    if (read !== undefined) {\n      config[key] = read;\n    }\n  });\n\n  return config\n}\n\n\n\n//# sourceURL=webpack://ai/./src/getConfig.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: generate, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"generate\", function() { return generate; });\n/* harmony import */ var _getConfig_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getConfig.js */ \"./src/getConfig.js\");\n\n\nclass Chart {\n  constructor(user_config) {\n    this.config = Object(_getConfig_js__WEBPACK_IMPORTED_MODULE_0__[\"load\"])(user_config)\n  }\n  draw() {\n    const $$ = this;\n    let {\n      bindto,\n      font_size,\n      size_width,\n      size_height,\n      rotate,\n      type,\n      divide_show,\n      divide_color,\n      divide_width,\n      x_name,\n      x_grid_show,\n      x_grid_color,\n      x_grid_width,\n      x_axis_line_show,\n      x_axis_line_color,\n      x_axis_line_width,\n      x_axis_ticks_show,\n      x_axis_ticks_color,\n      x_axis_title_show,\n      x_axis_title_color,\n      x_axis_hide,\n      x_axis_format,\n      y_grid_show,\n      y_grid_color,\n      y_grid_width,\n      y_axis_scale,\n      y_axis_percent,\n      y_axis_line_show,\n      y_axis_line_color,\n      y_axis_line_width,\n      y_axis_ticks_show,\n      y_axis_ticks_color,\n      y_axis_title_show,\n      y_axis_title_color,\n      y2_axis_line_show,\n      y2_axis_line_color,\n      y2_axis_line_width,\n      y2_axis_ticks_show,\n      y2_axis_ticks_color,\n      y2_axis_title_show,\n      y2_axis_title_color,\n      y2_scope,\n      tooltip_background,\n      tooltip_color,\n      padding_left,\n      padding_right,\n      padding_top,\n      padding_bottom,\n      data,\n      data2,\n      combined,\n    } = $$.config\n\n    //get size\n    let width = size_width - padding_left - padding_right\n    let height = size_height - padding_top - padding_bottom\n\n    let container = d3.select(bindto)\n    container.html(\"\")\n    //在容器上新增画布\n    let svg = container\n              .append('svg')\n              .attr(\"width\", size_width)\n              .attr(\"height\", size_height)\n\n    $$.MyContainer = container\n    $$.tooltipDiv = container\n                  .append(\"div\")\n                  .attr(\"class\", \"tooltip\")\n                  .attr(\"style\", () => {\n                    return `\n                      border: 1px solid #fff; \n                      background-color: ${tooltip_background}; \n                      color: ${tooltip_color};\n                      box-shadow: 0 1px 3px rgba(0,0,0,0.4); \n                      border-radius: 3px; \n                      padding: 6px; \n                      font-size: ${font_size}px; \n                      position: absolute;\n                      z-index: 100;\n                      opacity: 0\n                    `\n                  })\n    \n    let group_x_axis = svg.append('g').attr('class', 'group-x-axis')\n    let group_y_axis = svg.append('g').attr('class', 'group-y-axis')\n    let group_y2_axis = svg.append('g').attr('class', 'group-y2-axis')\n    let main_container = svg.append('g').attr('class', \"group-main\")\n    let group_x_grid = main_container.append(\"g\").attr(\"class\", \"group_x_grid\")\n    let group_y_grid = main_container.append(\"g\").attr(\"class\", \"group_y_grid\")\n    \n    let chart_width = width\n    let chart_height = height\n    let x_range = [0, width]\n    let y_range = [0, -height]\n    let x_function = d3.axisBottom\n    let y_function = d3.axisLeft\n    let y2_function = d3.axisRight\n    let x_text_pos = {\n      x: width,\n      y: padding_bottom - 5,\n      rotate: 0,\n      anchor: \"end\"\n    }\n    let y_text_pos = {\n      x: -padding_left + 5,\n      y: -height,\n      rotate: 90,\n      anchor: \"start\"\n    }\n    let y2_text_pos = {\n      x: padding_right - 10,\n      y: -height,\n      rotate: 90,\n      anchor: \"start\"\n    }\n    if(rotate) {\n      chart_width = height\n      chart_height = width\n      x_range = [0, height]\n      y_range = [0, width]\n      x_function = d3.axisLeft\n      y_function = d3.axisTop\n      y2_function = d3.axisBottom\n      x_text_pos = {\n        x: -padding_left + 5,\n        y: 0,\n        rotate: 90,\n        anchor: \"start\"\n      }\n      y_text_pos = {\n        x: width,\n        y: -padding_top + 10,\n        rotate: 0,\n        anchor: \"end\"\n      }\n      y2_text_pos = {\n        x: width,\n        y: height,\n        rotate: 0,\n        anchor: \"end\"\n      }\n      group_x_axis.attr(\"transform\", `translate(${padding_left}, ${padding_top})`)\n      group_y_axis.attr(\"transform\", `translate(${padding_left}, ${padding_top})`)\n      group_y2_axis.attr(\"transform\", `translate(${padding_left}, ${size_height - padding_bottom})`)\n      main_container.attr(\"transform\", `translate(${padding_left}, ${padding_top + height})`)\n    } else {\n      group_x_axis.attr(\"transform\", `translate(${padding_left}, ${size_height - padding_bottom})`)\n      group_y_axis.attr(\"transform\", `translate(${padding_left}, ${size_height - padding_bottom})`)\n      group_y2_axis.attr(\"transform\", `translate(${size_width - padding_right}, ${size_height - padding_bottom})`)\n      main_container.attr(\"transform\", `translate(${padding_left}, ${padding_top + height})`)\n    }\n    \n    let x_scale\n    let y_scale\n    let y2_scale\n    let isCat = type === 'category'\n    if(isCat) {\n      let domain = Array.from(new Set(data.map(d => d[x_name])))\n      x_scale = d3.scaleBand().domain(domain).range(x_range)\n    } else if(type === 'bin') {\n      let max = d3.max(data, d => d.end)\n      let min = d3.min(data, d => d.start)\n      if(min > 0) min = 0\n      x_scale = d3.scaleLinear().domain([min, max]).range(x_range).nice()\n    } else {\n      let domain = d3.extent(data, d => d[x_name])\n      if(domain[0] > 0) domain[0] = 0\n      x_scale = d3.scaleLinear().domain(domain).range(x_range).nice()\n    }\n    let y_domain = []\n    let y2_domain = []\n    let y_name = []\n    let y2_name = []\n    combined.forEach(c => {\n      let {\n        type,\n        name, \n        axis,\n        style\n      } = c \n      if(axis === 'y') {\n        let range = d3.extent(data, d => d[name])\n        if(y_domain[0] === undefined || y_domain[0] > range[0]) y_domain[0] = range[0]\n        if(y_domain[1] === undefined || y_domain[1] < range[1]) y_domain[1] = range[1]\n        if(y_domain[0] > 0) y_domain[0] = 0\n        y_domain[1] *= y_axis_scale // y坐标大一点\n        y_name.push(name)\n      }\n      if(axis === 'y2') {\n        let range = d3.extent(data, d => d[name])\n        if(y2_domain[0] === undefined || y2_domain[0] > range[0]) y2_domain[0] = range[0]\n        if(y2_domain[1] === undefined || y2_domain[1] < range[1]) y2_domain[1] = range[1]\n        if(y2_domain[0] > 0) y2_domain[0] = 0\n        y2_domain[1] *= y_axis_scale\n        y2_domain[1] = y2_domain[1] || 1\n        y2_name.push(name)\n      }\n    })\n    y_scale = d3.scaleLinear().domain(y_domain).range(y_range).nice()\n    console.log(y2_scope);\n    y2_scale = d3.scaleLinear().domain(y2_scope || y2_domain).range(y_range).nice()\n    y_name = y_name.join(' & ')\n    y2_name = y2_name.join(' & ')\n\n    function vaildCN (str) {\n      var pattern = new RegExp(\"[\\u4E00-\\u9FA5]+\");\n      if(pattern.test(str)){\n        return true\n      }\n      return false\n    }\n    function x_format (text) {\n      if (isNaN(text) || !x_axis_format) {\n        if (rotate) {\n          let len = vaildCN(text) ? Math.floor(padding_left / 18) : Math.floor(padding_left / 8);\n          return text.length > len ? text.substring(0, len) + '...' : text;\n        } else {\n          let len = vaildCN(text) ? 5 : 9\n          return text.length > len ? text.substring(0,len) + '...' : text\n        }\n      } else {\n        if (text > 9999 || text < -9999){\n          return  parseFloat(text).toExponential(1);\n        } else if (text >= 1000) {\n          return Number(text).toFixed(0);\n        } else if (text >= 100) {\n          return Number(text).toFixed(1)\n        } else if (text >= 10) {\n          return Number(text).toFixed(2)\n        } else if (text>=1) {\n          return Number(text).toFixed(3)\n        } else if (text >= 0.0001) {\n          return Number(text).toFixed(4)\n        } else if (text > 0) {\n          return parseFloat(text).toExponential(1)\n        } else if (text == 0) {\n          return 0\n        } else if (text > -0.0001) {\n          return parseFloat(text).toExponential(1)\n        } else if (text > -1) {\n          return Number(text).toFixed(4)\n        } else if (text > -10) {\n          return Number(text).toFixed(3)\n        } else if (text > -100) {\n          return Number(text).toFixed(2)\n        } else if (text > -1000) {\n          return Number(text).toFixed(1)\n        } else {\n          return Number(text).toFixed(0)\n        }\n      }\n    }\n\n    function y_format (text) {\n      if (y_axis_percent) {\n        return Math.floor(text * 100) + '%';\n      } else {\n        return text\n      }\n    }\n\n    function lineTip (d, line) {\n      let str = ``\n      Object.keys(d).forEach(k => {\n        if(d.noTip !== line.name) {\n          if (line.tooltip) {\n            let value = line.tooltip.value;\n            let title = line.tooltip.title;\n            let range = line.tooltip.range\n            if (range) {\n              str = `<div>${range}: ${d[range]} </div><div>${title ? d[title] : value}: ${d[value]}</div>`\n            } else {\n              if (y_axis_percent) {\n                str = `<div>${title ? d[title] : value}: ${(d[value] * 100).toFixed(2)}%</div>`\n              } else {\n                str = `<div>${title ? d[title] : value}: ${d[value]}</div>`\n              }\n            }\n          } else {\n            str += `<div>${k}: ${d[k]}</div>`\n          }\n          $$.displayTip(str)\n        }\n      })\n    }\n    \n    //x axis\n    group_x_axis.call(\n      x_function(x_scale)\n    )\n    .select(\"path\")\n    .attr(\"stroke\", x_axis_line_show ? x_axis_line_color : \"transparent\")\n    .attr(\"stroke-width\", x_axis_line_width)\n\n    group_x_axis.selectAll(\"line\")\n      .attr(\"stroke\", \"transparent\")\n\n    if (rotate) {\n      group_x_axis.selectAll(\"text\")\n        .attr('font-family', 'siyuanheiti')\n        .attr(\"fill\", x_axis_ticks_show ? x_axis_ticks_color : \"transparent\")\n        .text(function (text, index) {\n          if (x_axis_hide) {\n            if (index % x_axis_hide) {\n              return ''\n            } else {\n              return x_format(text)\n            }\n          } else {\n            return x_format(text)\n          }\n        })\n    } else {\n      group_x_axis.selectAll(\"text\")\n        .attr('font-family', 'siyuanheiti')\n        .attr(\"fill\", x_axis_ticks_show ? x_axis_ticks_color : \"transparent\")\n        .text(function (text, index) {\n          if (x_axis_hide) {\n            if (index % x_axis_hide) {\n              return ''\n            } else {\n              return x_format(text)\n            }\n          } else {\n            return x_format(text)\n          }\n        })\n    }\n\n    x_axis_title_show && group_x_axis.append(\"text\")\n          .attr(\"transform\", `translate(${x_text_pos.x}, ${x_text_pos.y})rotate(${x_text_pos.rotate})`)\n          .attr(\"text-anchor\", x_text_pos.anchor)\n          .text(x_name)\n          .attr(\"fill\", x_axis_title_color)\n    \n    // x grid\n    x_grid_show && group_x_grid.call(\n      x_function(x_scale)\n        .tickSize(-chart_height)\n        .tickFormat('')\n    )\n    .selectAll(\"line\")\n    .attr(\"stroke\", (d, i) => (i || isCat) ? x_grid_color : \"transparent\")\n    .attr(\"stroke-width\", x_grid_width)\n\n    group_x_grid.select(\"path\").attr(\"stroke\", \"transparent\")\n    \n    // y axis\n    group_y_axis.call(\n      y_function(y_scale).ticks(Math.floor(chart_height / 30) >= 10 ? 10 : Math.floor(chart_height / 30) )\n\n    )\n    .select(\"path\")\n    .attr(\"stroke\", y_axis_line_show ? y_axis_line_color : \"transparent\")\n    .attr(\"stroke-width\", y_axis_line_width)\n\n    group_y_axis.selectAll(\"line\")\n      .attr(\"stroke\", \"transparent\")\n    \n    group_y_axis.selectAll(\"text\")\n      .attr(\"fill\", y_axis_ticks_show ? y_axis_ticks_color : \"transparent\")\n      .text((d) => {\n        return y_format(d);\n      })\n\n    y_axis_title_show && group_y_axis.append(\"text\")\n          .attr(\"transform\", `translate(${y_text_pos.x}, ${y_text_pos.y})rotate(${y_text_pos.rotate})`)\n          .attr(\"text-anchor\", y_text_pos.anchor)\n          .text(y_name)\n          .attr(\"fill\", y_axis_title_color)\n    \n    // y grid\n    y_grid_show && group_y_grid.call(\n      y_function(y_scale)\n      .ticks(Math.floor(chart_height / 30) >= 10 ? 10 : Math.floor(chart_height / 30) )\n      .tickSize(rotate ? chart_width : -chart_width)\n      .tickFormat('')\n    )\n    .selectAll(\"line\")\n    .attr(\"stroke\", (d, i) => i ? y_grid_color : \"transparent\")\n    .attr(\"stroke-width\", y_grid_width)\n\n    group_y_grid\n      .select(\"path\")\n      .attr(\"stroke\", \"transparent\")\n\n    if(y2_domain.length) {\n      //y2 axis\n      group_y2_axis.call(\n        y2_function(y2_scale).ticks(Math.floor(chart_height / 30) >= 10 ? 10 : Math.floor(chart_height / 30) )\n      )\n      .select(\"path\")\n      .attr(\"stroke\", y2_axis_line_show ? y2_axis_line_color : \"transparent\")\n      .attr(\"stroke-width\", y2_axis_line_width)\n\n      group_y2_axis.selectAll(\"line\")\n        .attr(\"stroke\", \"transparent\")\n      \n      group_y2_axis.selectAll(\"text\")\n        .attr('font-family', 'siyuanheiti')\n        .attr(\"fill\", y2_axis_ticks_show ? y2_axis_ticks_color : \"transparent\")\n\n      y2_axis_title_show && group_y2_axis.append(\"text\")\n          .attr(\"transform\", `translate(${y2_text_pos.x}, ${y2_text_pos.y})rotate(${y2_text_pos.rotate})`)\n          .attr(\"text-anchor\", y2_text_pos.anchor)\n          .text(y2_name)\n          .attr(\"fill\", y2_axis_title_color)\n    }\n\n    if(divide_show) { \n      main_container.append(\"g\")\n        .attr(\"class\", \"divide-line\")\n        .append(\"line\")\n        .attr(\"stroke\", divide_color)\n        .attr(\"stroke-width\", divide_width)\n        .attr(\"x1\", 0)\n        .attr(\"y1\", 0)\n        .attr(\"x2\", width)\n        .attr(\"y2\", -height)\n    }\n    \n    let bars = combined.filter(c => c.type === 'bar')\n    let lines = combined.filter(c => c.type === 'line')\n    let lines2 = combined.filter(c => c.type === 'line2')\n    let bandwidth = isCat ? x_scale.bandwidth() : 0\n\n    //bars\n    main_container.append(\"g\")\n        .attr(\"class\", \"main-bars\")\n        .selectAll(\".group\")\n        .data(bars)\n        .enter()\n        .append(\"g\")\n        .attr(\"class\", \"group\")\n        .each(function(bar) {\n          let band = bar.style.band - bar.style.padding * 2\n          let radius = bar.style.radius\n          let local = d3.local()\n          let rects = d3.select(this).append('g')\n            .selectAll(\".rect\")\n            .data(data)\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"rect\")\n            .each(function(d) {\n              let x, y, w, h, transform, lessThenZero\n              if(rotate) {\n                lessThenZero = d[bar.name] < 0\n                y = x_scale(d[x_name]) + bandwidth / 2 - height\n                w = d[bar.name] < 0 ? y_scale(0) - y_scale(d[bar.name]) : y_scale(d[bar.name]) - y_scale(0)\n                w = Math.max(w - radius * 2, 0)\n                x = d[bar.name] > 0 ? y_scale(0) : y_scale(0) - w\n                x = x + x_axis_line_width - 0.2;\n                h = band\n                transform = `translate(0, ${- band / 2})`\n              } else {\n                x = x_scale(d[x_name]) + bandwidth / 2\n                y = d[bar.name] > 0 ? y_scale(d[bar.name]) : y_scale(0)\n                w = band\n                h = d[bar.name] > 0 ? y_scale(0) - y_scale(d[bar.name]) : y_scale(d[bar.name]) - y_scale(0)\n                // y += radius * 2\n                // h -= radius * 2\n                transform = `translate(${- band / 2}, 0)`\n              }\n              local.set(this, {\n                x, y, w, h, transform, lessThenZero\n              })\n            })\n          \n          rects.append(\"rect\")\n            .attr(\"x\", function() {return local.get(this).x})\n            .attr(\"y\", function() {return local.get(this).y})\n            .attr(\"width\", function() {return local.get(this).w})\n            .attr(\"height\", function() {return local.get(this).h})\n            .attr(\"transform\", function() {return local.get(this).transform})\n            .attr(\"fill\", bar.style.fill)\n            .on(\"mouseover\", d => {\n              let str = ``\n              Object.keys(d).forEach(k => {\n                if (bar.tooltip) {\n                  let value = bar.tooltip.value;\n                  let title = bar.tooltip.title;\n                  let range = bar.tooltip.range\n                  if (range) str = `<div>${range}: ${d[range]} </div><div>${title ? d[title] : value}: ${d[value]}</div>`\n                  else str = `<div>${title ? d[title] : value}: ${d[value]}</div>`\n                  if (d[range] === '缺失' || d[range]==='missing') str = `<div>${d[range]}:${d[value]}</div>`\n                } else {\n                  str += `<div>${k}: ${d[k]}</div>`\n                }\n              })\n              $$.displayTip(str)\n            })\n            .on(\"mouseout\", () => {\n              $$.displayTip()\n            })\n          \n          if(radius) {\n            let line = d3.line().curve(d3.curveNatural)\n            rects.append(\"path\")\n              .attr(\"transform\", function() {return local.get(this).transform})\n              .attr(\"d\", function() {\n                let {x, y, w, h, lessThenZero } = local.get(this)\n                if(rotate) {\n                  if(w <= 0) return\n                  let line_data = []\n                  if(lessThenZero) {\n                    line_data = [\n                      [x, y],\n                      [x - radius * 1.5, y + h / 4],\n                      [x - radius * 2, y + h / 2],\n                      [x - radius * 1.5, y + h / 4 * 3],\n                      [x, y + h]\n                    ]\n                  } else {\n                    line_data = [\n                      [x+w, y],\n                      [x+w + radius * 1.5, y + h / 4],\n                      [x+w + radius * 2, y + h / 2],\n                      [x+w + radius * 1.5, y + h / 4 * 3],\n                      [x+w, y + h]\n                    ]\n                  }\n                  return line(line_data)\n                } else {\n                  //\n                }\n              })\n              .attr(\"fill\", bar.style.fill)\n          }\n        })\n\n    function drawLine (lineType, lines) {\n      main_container.append(\"g\")\n      .attr(\"class\", `main-${lineType}`)\n      .selectAll(\".group\")\n      .data(lines)\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"group\")\n      .each(function(line) {\n        let scale = line.axis === \"y\" ? y_scale : y2_scale\n        let interpolate = line.style.interpolate\n        let {color, size, type, border} = line.style.point\n        let stroke_color = line.style.stroke.color\n        let stroke_width = line.style.stroke.width\n        let symbol = \"\"\n        if(type === 'cross') {\n          symbol = d3.symbolCross\n        } else if(type === 'triangle') {\n          symbol = d3.symbolTriangle\n        } else if(type === 'square') {\n          symbol = d3.symbolSquare\n        } else {\n          symbol = d3.symbolCircle\n        }\n        let arc = d3.symbol().type(symbol).size(size);\n        let valueLine = d3.line()\n          .defined((d) => {\n            if (d !== undefined) {\n              if (d.noDraw === line.name){\n                return false;\n              }\n              return true\n            }\n            return false\n          })\n          .x((d) => x_scale(d[x_name]) + bandwidth / 2)\n          .y((d) => scale(d[line.name]))\n        \n          if(interpolate) {\n            valueLine\n              .curve(d3.curveCardinal)\n          }\n        d3.select(this).append(\"path\")\n          .attr(\"d\", valueLine(data))\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", stroke_color)\n          .attr(\"stroke-width\", stroke_width)\n          .on('mouseenter', (d) => {\n            let str = `<div>${d.name}</div>`\n            $$.displayTip(str)\n          })\n          .on(\"mouseout\", () => {\n            $$.displayTip()\n          })\n\n        if(symbol !== \"\") {\n          d3.select(this).append(\"g\")\n            .selectAll(\"path\")\n            .data(data)\n            .enter()\n            .append(\"path\")\n            .attr('d',arc)\n            .attr(\"fill\", (d) => {\n              if (d.noTip === line.name) {\n                return 'none'\n              }\n              if (type === 'circle' && border){\n                return 'white'\n              }\n              return color\n            })\n            .attr(\"stroke\", (d) => {\n              if (d.noTip === line.name) {\n                return 'none'\n              }\n              if (type === 'circle' && border){\n                return color;\n              }\n              return 'none'\n            })\n            .attr(\"stroke-width\", () => {\n              if (type === 'circle' && border) {\n                return border + 'px'\n              }\n              return 'none'\n            })\n            .attr(\"transform\", d => {\n              return `translate(${x_scale(d[x_name]) + bandwidth / 2}, ${scale(d[line.name])})`\n            })\n            .on(\"mouseenter\", (d) => {\n              lineTip(d, line)\n            })\n            .on(\"mouseout\", () => {\n              $$.displayTip()\n            })\n        }\n      })\n    }\n    if (!lines2.length) {\n      drawLine('lines', lines);\n      svg.selectAll(\"text\").attr(\"font-size\", font_size).attr('font-family', 'siyuanheiti')\n      return;\n    }\n    if (lines2[0].isup) {\n      drawLine('lines', lines);\n    }\n    // //lines data2画第二个线性图\n    main_container.append(\"g\")\n        .attr(\"class\", \"main-lines2\")\n        .selectAll(\".group\")\n        .data(lines2)\n        .enter()\n        .append(\"g\")\n        .attr(\"class\", \"group\")\n        .each(function(line) {\n          let scale = line.axis === \"y2\" ? y_scale : y2_scale\n          let interpolate = line.style.interpolate\n          let {color, size, type, border} = line.style.point\n          let stroke_color = line.style.stroke.color\n          let stroke_width = line.style.stroke.width\n          let symbol = \"\"\n          if(type === 'cross') {\n            symbol = d3.symbolCross\n          } else if(type === 'triangle') {\n            symbol = d3.symbolTriangle\n          } else if(type === 'square') {\n            symbol = d3.symbolSquare\n          } else {\n            symbol = d3.symbolCircle\n          }\n          let arc = d3.symbol().type(symbol).size(size);\n          let valueLine = d3.line()\n            .defined((d) => {\n              if (d !== undefined) {\n                if (d.noDraw === line.name){\n                  return false;\n                }\n                return true\n              }\n              return false\n            })\n            .x((d) => x_scale(d[x_name]) + bandwidth / 2)\n            .y((d) => scale(d[line.name]))\n          \n            if(interpolate) {\n              valueLine\n                .curve(d3.curveCardinal)\n            }\n          d3.select(this).append(\"path\")\n            .attr(\"d\", valueLine(data2))\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", stroke_color)\n            .attr(\"stroke-width\", stroke_width)\n            .on('mouseenter', (d) => {\n              let str = `<div>${d.name}</div>`\n              $$.displayTip(str)\n            })\n            .on(\"mouseout\", () => {\n              $$.displayTip()\n            })\n\n          if(symbol !== \"\") {\n            d3.select(this).append(\"g\")\n              .selectAll(\"path\")\n              .data(data2)\n              .enter()\n              .append(\"path\")\n              .attr('d',arc)\n              .attr(\"fill\", (d) => {\n                if (d.noTip === line.name) {\n                  return 'none'\n                }\n                if (type === 'circle' && border){\n                  return 'white'\n                }\n                return color\n              })\n              .attr(\"stroke\", (d) => {\n                if (d.noTip === line.name) {\n                  return 'none'\n                }\n                if (type === 'circle' && border){\n                  return color;\n                }\n                return 'none'\n              })\n              .attr(\"stroke-width\", () => {\n                if (type === 'circle' && border) {\n                  return border + 'px'\n                }\n                return 'none'\n              })\n              .attr(\"transform\", d => {\n                return `translate(${x_scale(d[x_name]) + bandwidth / 2}, ${scale(d[line.name])})`\n              })\n              .on(\"mouseenter\", (d) => {\n                lineTip(d, line)\n              })\n              .on(\"mouseout\", () => {\n                $$.displayTip()\n              })\n          }\n        })\n        if (!lines2[0].isup) {\n          drawLine('lines', lines);\n        }\n      \n    svg.selectAll(\"text\").attr(\"font-size\", font_size).attr('font-family', 'siyuanheiti')\n\n  }\n\n  // 显示/隐藏 tooltip\n  displayTip (htmlStr = '') {\n    const $$ = this;\n    if (!htmlStr) {\n      return $$.tooltipDiv\n              .style(\"opacity\", 0)\n              .style('display', 'none')\n    }\n    const parentRect = $$.MyContainer.node().getBoundingClientRect();\n    let dx = d3.event.clientX - parentRect.left,\n        dy = d3.event.clientY - parentRect.top - 60;\n    $$.tooltipDiv.html(htmlStr)\n      .style(\"opacity\", 1)\n      .style(\"left\", () => dx + 10 + 'px')\n      .style(\"top\", () => dy + 'px')\n      .style('display', 'block')\n  }\n  \n}\n\n// export api\nconst generate = function(config) {\n  const inst = new Chart(config)\n\n  inst.draw()\n}\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (generate);\n\n//# sourceURL=webpack://ai/./src/index.js?");

/***/ })

/******/ });
});